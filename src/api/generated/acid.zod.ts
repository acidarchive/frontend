/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * acid
 * API for acidarchive.com
 * OpenAPI spec version: 0.0.1-alpha.11
 */
import {
  z as zod
} from 'zod';


export const listTb303PatternsResponseItem = zod.object({
  "author": zod.string().nullish(),
  "created_at": zod.iso.datetime({}),
  "is_public": zod.boolean(),
  "name": zod.string(),
  "pattern_id": zod.uuid(),
  "title": zod.string().nullish(),
  "updated_at": zod.iso.datetime({})
})
export const listTb303PatternsResponse = zod.array(listTb303PatternsResponseItem)


export const createTb303PatternBody = zod.object({
  "accent": zod.number().nullish(),
  "author": zod.string().nullish(),
  "cut_off_freq": zod.number().nullish(),
  "decay": zod.number().nullish(),
  "description": zod.string().nullish(),
  "env_mod": zod.number().nullish(),
  "is_public": zod.boolean().nullish(),
  "name": zod.string(),
  "resonance": zod.number().nullish(),
  "steps": zod.array(zod.object({
  "accent": zod.boolean().nullish(),
  "note": zod.union([zod.null(),zod.enum(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'Chigh'])]).optional(),
  "number": zod.number(),
  "slide": zod.boolean().nullish(),
  "time": zod.enum(['note', 'tied', 'rest']),
  "transpose": zod.union([zod.null(),zod.enum(['up', 'down'])]).optional()
})),
  "tempo": zod.number().nullish(),
  "title": zod.string().nullish(),
  "triplets": zod.boolean().nullish(),
  "tuning": zod.number().nullish(),
  "waveform": zod.union([zod.null(),zod.enum(['square', 'sawtooth'])]).optional()
})

export const createTb303PatternResponse = zod.object({
  "data": zod.object({
  "id": zod.string()
}),
  "status": zod.string()
})


export const getRandomTb303PatternResponse = zod.object({
  "accent": zod.number().nullish(),
  "author": zod.string().nullish(),
  "created_at": zod.iso.datetime({}).nullish(),
  "cut_off_freq": zod.number().nullish(),
  "decay": zod.number().nullish(),
  "description": zod.string().nullish(),
  "env_mod": zod.number().nullish(),
  "id": zod.uuid().nullish(),
  "is_public": zod.boolean().nullish(),
  "name": zod.string(),
  "resonance": zod.number().nullish(),
  "steps": zod.array(zod.object({
  "accent": zod.boolean().nullish(),
  "id": zod.uuid(),
  "note": zod.string().nullish(),
  "number": zod.number(),
  "slide": zod.boolean().nullish(),
  "time": zod.string().nullish(),
  "transpose": zod.string().nullish()
})),
  "tempo": zod.number().nullish(),
  "title": zod.string().nullish(),
  "triplets": zod.boolean().nullish(),
  "tuning": zod.number().nullish(),
  "updated_at": zod.iso.datetime({}).nullish(),
  "waveform": zod.string().nullish()
})


export const getTb303PatternParams = zod.object({
  "pattern_id": zod.string().describe('The ID of the TB303 pattern to retrieve')
})

export const getTb303PatternResponse = zod.object({
  "accent": zod.number().nullish(),
  "author": zod.string().nullish(),
  "created_at": zod.iso.datetime({}).nullish(),
  "cut_off_freq": zod.number().nullish(),
  "decay": zod.number().nullish(),
  "description": zod.string().nullish(),
  "env_mod": zod.number().nullish(),
  "id": zod.uuid().nullish(),
  "is_public": zod.boolean().nullish(),
  "name": zod.string(),
  "resonance": zod.number().nullish(),
  "steps": zod.array(zod.object({
  "accent": zod.boolean().nullish(),
  "id": zod.uuid(),
  "note": zod.string().nullish(),
  "number": zod.number(),
  "slide": zod.boolean().nullish(),
  "time": zod.string().nullish(),
  "transpose": zod.string().nullish()
})),
  "tempo": zod.number().nullish(),
  "title": zod.string().nullish(),
  "triplets": zod.boolean().nullish(),
  "tuning": zod.number().nullish(),
  "updated_at": zod.iso.datetime({}).nullish(),
  "waveform": zod.string().nullish()
})


export const updateTb303PatternParams = zod.object({
  "pattern_id": zod.string().describe('ID of the pattern to update')
})

export const updateTb303PatternBody = zod.object({
  "accent": zod.number().nullish(),
  "author": zod.string().nullish(),
  "cut_off_freq": zod.number().nullish(),
  "decay": zod.number().nullish(),
  "description": zod.string().nullish(),
  "env_mod": zod.number().nullish(),
  "is_public": zod.boolean().nullish(),
  "name": zod.string(),
  "resonance": zod.number().nullish(),
  "steps": zod.array(zod.object({
  "accent": zod.boolean().nullish(),
  "note": zod.union([zod.null(),zod.enum(['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'Chigh'])]).optional(),
  "number": zod.number(),
  "slide": zod.boolean().nullish(),
  "time": zod.enum(['note', 'tied', 'rest']),
  "transpose": zod.union([zod.null(),zod.enum(['up', 'down'])]).optional()
})),
  "tempo": zod.number().nullish(),
  "title": zod.string().nullish(),
  "triplets": zod.boolean().nullish(),
  "tuning": zod.number().nullish(),
  "waveform": zod.union([zod.null(),zod.enum(['square', 'sawtooth'])]).optional()
})

export const updateTb303PatternResponse = zod.object({
  "data": zod.object({
  "id": zod.string()
}),
  "status": zod.string()
})


export const deleteTb303PatternParams = zod.object({
  "pattern_id": zod.string().describe('The ID of the TB303 pattern to delete')
})


